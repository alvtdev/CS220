import sys
import os

# Some global flags for the metaheuristic and stochastic tunneling params
# There are 3 types of metaheuristics: penalty, kempe, fixed_k.
# Represent metaheuristic with var "mh"
mh = ""
# st is a flag for whether or not stochastic tunneling is needed
st = 0

def clear_prev_output_files():
    """Clears output files generated by previous executions of this program
    Args: none.
    Returns: none.
    """
    if os.path.isfile("anneal.run"):
        os.remove("anneal.run")
    if os.path.isfile("anneal.trace"):
        os.remove("anneal.trace")
    return


def read_params():
    """Fetches parameter values from params.in (input text file containing
    parameters for simulated annealing)

    The format of params.in is as follows:
       "INITPROB #
        FREEZE_LIM #
        SIZEFACTOR #
        CUTOFF #
        TEMPFACTOR #
        MINPERCENT #
        GAMMA #
        KCOLORS #" 
    where each line is the parameter name followed by a space and the value

    Args: none. Currently assuming the input file is always named "params.in"

    Returns:
        A list containing each value obtained from "params.in" in the order 
        listed above.
    """
    if not os.path.isfile("params.in"):
        print("Error: params.in unavailable")
        sys.exit()
    f = open("params.in", "r")
    paramslist = []
    for line in f: 
        paramslist.append(line.split()[1])
    f.close()
    return paramslist

def init_matrix(n):
    """Initializes and returns an nxn matrix

    Args: n - the size of the matrix to be initialized

    Returns: the initialized nxn matrix
    """
    init_mat = []
    for i in range(0, n):
        mat_row = []
        for j in range(0, n):
            mat_row.append(0)
        init_mat.append(0)
    return init_mat

def read_graph(in_file):
    """Reads DIMACS Clique/Coloring challenge formatted input file and
    generates an adjacency matrix according to it.

    ***Some notes about the cc graph format:***

    Comments begin with "c" - ex. "c This is a comment"

    Problem line begins with "p" - ex. "p <FORMAT> <NODES> <EDGE>
        - assume <FORMAT> is text
        - <NODES> = # of nodes in the graph
        - <EDGE> = # of edges in the graph

    Node descriptors begin with "n" - ex. "n ID VALUE"
        - ID = node ID number, integer between 1 to n (number of nodes)
        - VALUE = weight of the node assuming weighted graph

    Edge descriptors begin with "e" - ex. "e W V"
        - Example states there is an edge connecting node W to node V

    Args: 
        in_file: name of the input file containing graph specs

    Returns:
        An adjacency matrix determined using the file's graphs specs
    """
    if not os.path.isfile(in_file):
        print("Error: input file \"" + in_file + "\" unavailable")
        sys.exit()
    f = open(in_file, "r")

    # iterate through in_file, only get info from problem lines,
    # node descriptors, and edge descriptors
    # NOTE: This function also assumes the input file is valid, according to
    #       the DIMACS challenge guidelines
    #       This program as a whole also assumes that we are not dealing with
    #       a weight graph when approaching the vertex coloring problem 

    num_nodes = 0
    adj_mat = [[]]
    nodelist = []
    for line in f:
        currline = line.split()

        # the p branch should only be taken once
        if currline[0] == "p":
            num_nodes = currline[2]
            adj_mat = init_matrix(num_nodes)

        # append each node, if found, to a node list
        # NOTE: branch will be removed if deemed entirely unnecessary

        elif currline[0] == "n":
            nodelist.append(currline[1])
            
        # Use edge descriptors to populate adjacency matrix
        # NOTE: Currently assuming that the graph is undirected

        elif currline[0] ==  "e":
            mat_row = currline[1]
            mat_col = currline[2]
            adj_mat[mat_row][mat_col] = 1
            adj_mat[mat_col][mat_row] = 1

    return adj_mat

    

def sim_anneal(in_file, sim_seed):

    # read params.in and store in list. order is:
    # [INITPROB, FREEZE_LIM, SIZEFACTOR, CUTOFF,
    #  TEMPFACTOR, MINPERCENT, GAMMA, KCOLORS] 

    params = read_params()
    adj_mat = read_graph(in_file)

    


def main():

    # argv validation

    if len(sys.argv) > 3 and len(sys.argv) < 6:

        in_file = sys.argv[1]
        sim_seed = sys.argv[2]

        # determine flags and run sim anneal

        mh = sys.argv[3]

        # ensure proper metaheuristic is called

        if mh != "-penalty" and mh != "-kempe" and mh != "-fixed_k":
            print("Error: invalid metaheuristic \"" + mh + "\"")
            sys.exit()
        if len(sys.argv) == 5:
            st = 1
        clear_prev_output_files()
        sim_anneal(in_file, sim_seed)
    else:
        print("Usage: python anneal.py <filename> <seed> <metaheuristic>")
    return

if __name__ == "__main__":
    main()
